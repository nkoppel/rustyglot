<infiles/input options> <pgn options>? <bin options>? <outfile/output options>

input options: // only necessary if the format of the input file differs from the extension
    note: '-' should indicate stdin
    -in-json
    -in-tree
    -in-bin
    -in-pgn

output options:
    note: the last filename is implicitly the output file, and uses file extension detection like -out

    output to file
        -out <file>: output into file with file extension detection
    output to stdout
        -out-json
        -out-tree
        -out-tree-blob
        -out-bin

pgn options:
    -min-elo <elo>
    -max-elo <elo>
    -min-high-elo <elo>
    -max-low-elo <elo>

    -max-elo-diff <difference>
    -min-elo-diff <difference>

    -min-game-length <full moves>
    -max-game-length <full moves>

    -min-time <time>
    -max-time <time>
    -min-increment <time>
    -max-increment <time>

    -depth <max_depth>: truncates each game to max_depth half-moves

    -no-draws
    -no-wins
    -no-white-wins
    -no-black-wins

pgn to bin conversion options
    -frequency: instead of weighing moves by 2 points per win and 1 point per draw, weigh them by one point per occurrence
    -pgn-depth <max_depth> (default infinite)

merge options:
    -combine-entries: instead of entries from input files given later being ignored, have entries from later books add their weights to existing entries (learning values of later books are still ignored)

bin options:
    -set-root <fen string>: default is the normal starting position

    -min-weight <weight>
    -max-weight <weight>

    -depth <max_depth>
    -remove-disconnected: remove all nodes not below the root node
    -keep-best <num best>?
    -keep-worst <num worst>?
    -white-only
    -black-only

    -clear-learning
    -uniform
    -scale-weights <factor>: multiply all weights by the floating point factor
